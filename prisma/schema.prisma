// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Years {
  PUPPY
  ADULT
  ELDERLY
}

enum Port {
  SMALL
  AVERAGE
  BIG
}

enum Dependency {
  LOW
  AVERAGE
  HIGH
}

enum Environment {
  WIDE
  AVERAGE
  SMALL
}

enum DType {
  CAT
  DOG
}

model Organization {
  id            String  @id @default(uuid())
  responsible   String
  email         String  @default("")
  address       String
  zip_code      String
  city          String  @default("")
  state         String  @default("")
  latitude      Decimal @default(0)
  longitude     Decimal @default(0)
  phone         String  @default("")
  password_hash String

  created_at DateTime @default(now())
  // deleted_at DateTime?
  pets       Pet[]
  // deleted_at DateTime? @db.Timestamptz

  @@map("organizations")
}

model Pet {
  id               String      @id @default(uuid())
  name             String
  about            String
  dtype            DType
  years            Years       @default(ADULT)
  port             Port        @default(AVERAGE)
  energy_level     Int         @default(1)
  dependency_level Dependency  @default(AVERAGE)
  environment      Environment @default(AVERAGE)

  created_at DateTime @default(now())
  // deleted_at DateTime?

  files         File[]
  requiriments  Requirement[]
  files_on_pets FilesOnPets[]

  organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  organization_id String

  @@map("pets")
}

model File {
  id   String @id @default(uuid())
  name String

  created_at DateTime @default(now())
  // deleted_at DateTime?

  pets        Pet[]
  filesOnPets FilesOnPets[]

  @@map("files")
}

model Requirement {
  id          String @id @default(uuid())
  description String
  pet         Pet    @relation(fields: [pet_id], references: [id], onDelete: Cascade)
  pet_id      String

  created_at DateTime @default(now())
  // deleted_at DateTime?

  @@map("requirements")
}

model FilesOnPets {
  pet    Pet    @relation(fields: [pet_id], references: [id], onDelete: Cascade)
  pet_id String

  file    File   @relation(fields: [file_id], references: [id], onDelete: Cascade)
  file_id String

  @@id([pet_id, file_id])
  @@map("files_pets")
}
